searchNodes=[{"doc":"Edgehog is an Open Source IoT platform focused on device fleet management. It conveniently handles fundamental operations such as performing update campaigns, getting device status information, geolocation and much more. It is based on Astarte . This documentation provides information on daily operations for Edgehog users and integrators. It goes through fundamental operations such as performing updates, querying APIs , integrating 3rd party applications, etc.","ref":"intro_user.html","title":"Introduction","type":"extras"},{"doc":"This page will illustrate some of the core concepts used in Edgehog.","ref":"core_concepts.html","title":"Core concepts","type":"extras"},{"doc":"This section will deal with the difference between three main concepts used throughout Edgehog: Hardware Types, Devices and System Models. To better illustrate this, we will use as example the ACME Inc company, which manages a fleet of e-bikes and electric scooters. We will illustrate the hierarchy going from the bottom up, showing how each concept relates to the other ones. Hardware Type An Hardware Type represents the electronic hardware components embedded in an device. As an example, a possible Hardware Type description could be &quot;ESP32 with a GSM module&quot; or &quot;RaspberryPi 0 with an LTE modem&quot;. Each Hardware Type can have one or more Hardware Type Part Numbers associated with it. This makes sure that the user is able to map, e.g., a new revision of the PCB to the same Hardware Type, since different hardware with the same Hardware Type is assumed to be compatible. Usually (but not necessarily) the Hardware Type Part Number is a code that is written on the PCB. Device A device is an entity connected to Astarte. A Device has a uniquely identified by its Device ID, and it usually lives inside a product such as an e-bike (if it is not on a shelf or in a repair shop). System Models A System Model constitutes a group of devices implementing the same functionality for some users. For example, two e-bikes can be physically identical and still belong to different System Models, since they can have different software running on them. A System Model is associated with a specific Hardware Type, so two devices implementing the same functionality but using different Hardware Types will belong to two different System Models. This makes it so that the System Model is the fundamental identifier when it comes to software updates. A System Model has one or more System Model Part Numbers asociated with it, allowing to track newer versions of a product which do not change its main functionality. Usually (but not necessarily) the System Model's Part Number is delivered along with the device, or on the box containing it. Drawing again from our bike sharing example, e-bikes and electric scooters would have two different System Models, even if they use the same Hardware Type (e.g. an ESP32 with a GSM module). It is also possible that the e-bikes are further split into different System Models depending on the country they are deployed in if, for example, the software has to conform to speed limitations which are specific for each country.","ref":"core_concepts.html#hardware-types-devices-and-system-models","title":"Core concepts - Hardware types, Devices and System Models","type":"extras"},{"doc":"For each hardware type the following information can be displayed and edited. Name: a user friendly name, such as &quot;Strawberry Pi 5&quot; Handle: a machine friendly identifier, such as &quot;strawberry-pi-5&quot; (it must be a lower case, alpha numeric string, with no spaces and dashes allowed in the middle) Part Numbers: a list of part numbers, such as &quot;STBEPI-5-MA-2GB-REV1&quot;,&quot;STBEPI-5-MB-8GB-REV1&quot;, &quot;STBEPI-5-MB-8GB-REV2&quot;, etc... Multiple part numbers can be entered using the &quot;Add Part Number&quot; button.","ref":"hardware_types.html","title":"Hardware Types","type":"extras"},{"doc":"This page allows creating a new hardware type, once created it can be edited at a later time.","ref":"hardware_types.html#create-hardware-type","title":"Hardware Types - Create Hardware Type","type":"extras"},{"doc":"By clicking the link on the hardware type list it is possible to open the detailed Hardware Type page. It is possible to edit the existing hardware type and to update it clicking the &quot;Update&quot; button.","ref":"hardware_types.html#update-hardware-type","title":"Hardware Types - Update Hardware Type","type":"extras"},{"doc":"As already mentioned in the core concepts , System Models represent a group of devices providing the same functionalities to users. In Edgehog a System Model has this information associated with it: Name: a user friendly name used to identify the System Model (e.g. &quot;E-Bike v2&quot;) Handle: a machine friendly identifier for the System Model (e.g. &quot;e-bike-v2&quot;). A valid handle must begin with a lowercase letter followed by any number of lower case letters, numbers or dashes ( - ). Hardware type: the Hardware Type that is used for this system model. As illustrated in core concepts , each System Model is associated with exactly one Hardware Type. Part numbers: the Part Numbers for this System Model. Each System Model can have one or more Part Numbers associated with it, and Devices will be associated with a System Model based on the Part Number they declare to implement. Picture: each System Model can have a picture associated with it, so that Devices using that System Model can be identified at a glance. The following sections will illustrate all the pages that can be used to list, create and edit System Models.","ref":"system_models.html","title":"System models","type":"extras"},{"doc":"In the system model list you can see all the System Models that are available. All information relative to each System Model (minus the picture) is present in the table, and clicking on the name brings to the System Model page. Clicking on the &quot;Create System Model&quot; button in the top right brings to Create System Model page.","ref":"system_models.html#system-model-list","title":"System models - System Model List","type":"extras"},{"doc":"The System Model page shows the information about a specific System Model and allows updating all of them except the Hardware Type. Editing any field and then pressing the &quot;Update&quot; button saves the new values for the System Model. The &quot;Add Part Number&quot; button allows adding additional Part Numbers to a System Model, and the thrash icon on the right of each of them allows deleting them.","ref":"system_models.html#system-model","title":"System models - System Model","type":"extras"},{"doc":"The Create System Model page allows creating a new System Model. The System Model information can be provided using the form, and pressing the &quot;Update&quot; button saves the System Model. The Hardware Type must be chosen from a list of available Hardware Types using the dropdown menu. The &quot;Add Part Number&quot; button allows adding additional Part Numbers for the System Model.","ref":"system_models.html#create-system-model","title":"System models - Create System Model","type":"extras"},{"doc":"As mentioned in the core concepts , a Device is an entity connected to Astarte. In the device list you can see all the Devices that are available. For each Device the following information can be displayed: Name: a user friendly name Device ID: the ID that uniquely identifies the device connecting to Astarte System Model: the System Model associated to the Device Hardware Type: the Hardware Type associated to the Device's System Model Status: Reports the connection status, indicating whether the Device is connected to Astarte Last Seen: Reports the time of the last connection activity of the Device Clicking on a Device's name brings to a page dedicated to that Device to display additional info.","ref":"devices.html","title":"Devices","type":"extras"},{"doc":"Each Device will become visible in Edgehog automatically the first time it connects to Astarte. Indeed, Astarte informs Edgehog about the Device's presence and activity via Astarte Triggers, which should be configured to relay the appropriate events.","ref":"devices.html#adding-a-device","title":"Devices - Adding a Device","type":"extras"},{"doc":"Each Device is associated to a specific System Model. The System Model is the fundamental identifier when it comes to software updates, since it dictates which software is supported and what functionalities should be configured. However, during its lifetime, a Device can be tied to different System Models. Say, for example, that two different models of e-bikes are sent to maintenance; if they share the same hardware, the working PCB board of one model could be fitted into the other one. For this reason, each time a Device connects to Astarte, it can notify Astarte about the System Model it refers to, exposing its Part Number. Astarte then informs Edgehog via Astarte Triggers, so that Edgehog can associate the Device to the correct System Model by matching the Device's Part Number with the ones of the System Model.","ref":"devices.html#associating-a-device-to-a-system-model","title":"Devices - Associating a Device to a System Model","type":"extras"},{"doc":"On the page of each Device different sets of data are shown. On top of the basic info already visible in the device list, additional sections can be displayed here to report operational data exposed by the device. The details about how devices publish such data are explained in Interacting with Edgehog . Hardware info This section reports an overview on the general hardware capabilities of the Device. Operating System This section reports an overview of the operating system of the Device. Base Image This section reports an overview of the Base Image of the Device. System status This section reports an overview on the current system status of the Device. Storage Status This section reports an overview on the capacity and usage of the storage units of the Device. Battery status This section reports an overview on the current status of the battery slots of the Device. Cellular Connection This section reports an overview of the cellular connection of the Device. Nearby WiFi APs This section reports the list of nearby Access Points that the Device found while scanning for WiFi signals. Geolocation This section reports the approximate location of the Device, using Edgehog's geolocation modules to estimate a set of GPS coordinates. Depending on the data exposed by the Device, the coordinates can be estimated from: nearby WiFi APs that the Device detected recently the IP address used by the Device to connect to Astarte Based on the available data, Edgehog's geolocation modules try to find to best estimate by relying on the most up-to-date info and using the ones that provide the most accuracy.","ref":"devices.html#device-info","title":"Devices - Device info","type":"extras"},{"doc":"This is an overview of Edgehog's architecture. The following sections will detail the interactions between Edgehog and the other components represented in the architecture diagram.","ref":"overview.html","title":"Architecture overview","type":"extras"},{"doc":"Edgehog exposes two ways to interact with it: a frontend that can be used by users and a GraphQL API which can be used by third party applications to programmatically perform all actions that can be performed in the frontend. As a matter of fact, the frontend itself uses the GraphQL API to perform its tasks.","ref":"overview.html#user-interaction","title":"Architecture overview - User interaction","type":"extras"},{"doc":"Edgehog uses PostgreSQL to store its data. The database schema supports multiple tenants which are isolated at the database level. This makes it possible to use a single Edgehog instance with multiple tenants (e.g. in a SaaS scenario).","ref":"overview.html#database-interaction","title":"Architecture overview - Database interaction","type":"extras"},{"doc":"To interact with the other side of the domain (i.e. devices), Edgehog is built upon Astarte and it exchanges data with it using two of its mechanisms: its REST API and Astarte Triggers . Each Edgehog tenant is mapped to an Astarte Realm, and it owns the credentials to interact with all the Realm APIs for that specific Realm. Edgehog Astarte Interfaces The interaction between Edgehog and Astarte is defined by a set of interfaces that define which data is sent both from Edgehog to the Devices and from the Devices towards Edgehog. Additionally, connection and disconnection triggers ar installed in the Astarte Realm, and point to the triggers endpoint of the Edgehog tenant. Astarte AppEngine API The REST API is called every time Edgehog needs to retrieve data contained in an Astarte interface or when it needs to send data to the Devices. In the first case, Edgehog issues a GET HTTP request to retrieve the data from AppEngine API, which reads the data from the Astarte database. When Edgehog needs to send data towards a Device instead, it sends a POST HTTP to AppEngine API, which takes care of delivering data via MQTT to the device. Astarte Triggers Astarte Triggers are used to update the online state of the device. Each time a Device connects or disconnects from Astarte, Astarte Trigger Engine sends an HTTP POST request to the Edgehog backend, which in turn updates the Device online status in its own database.","ref":"overview.html#device-interaction-through-astarte","title":"Architecture overview - Device interaction (through Astarte)","type":"extras"},{"doc":"Edgehog's interaction is logically divided amongst two main entities: devices and users. Devices are the bottom end, and represent the IoT fleet. They can access Astarte and exchange data via Astarte Interfaces which, in turn, also define on a very granular level which kind of data they can exchange. Data exposed by devices are relayed to Edgehog via Astarte Triggers. Users are actual users, applications or anything else which needs to interact with Edgehog.","ref":"interacting_with_edgehog.html","title":"Interacting with Edgehog","type":"extras"},{"doc":"To interact with Edgehog, several options are available: Edgehog's dashboard interface: it provides a built-in UI that can be used for managing Devices, Hardware Types, and System Models. It is meant to be a graphical, user-friendly tool to manage those entities. Edgehog's GraphQL APIs : they are meant as a machine-friendly way to perform operations on Edgehog's entities and for integrating 3rd party applications.","ref":"interacting_with_edgehog.html#user-side-tools","title":"Interacting with Edgehog - User-side Tools","type":"extras"},{"doc":"Devices can publish any kind of data to Astarte via Astarte Interfaces. However, some standard interfaces are already supported by Edgehog in order to provide useful functionalities, such as device geolocation. Hence, data that devices send via Edgehog's Astarte Interfaces are automatically understood, collected and reported by Edgehog. Publishing info about the System Each Device is supposed to notify Astarte, e.g. on each connection, about its System. To do so, the Device can use the io.edgehog.devicemanager.SystemInfo Astarte Interface to specify: the Serial Number: a code that uniquely identifies the System the Part Number: a code that uniquely identifies the System Model When exposing the Part Number, Edgehog can associate the Device to the correct System Model by matching the Device's Part Number with the ones of the registered System Model. Publishing info about the hardware Each Device can notify Astarte about the general capabilities of the Device. These info are hardware-related and are usually not intended to change over time. A Device can expose this set of data via the io.edgehog.devicemanager.HardwareInfo Astarte Interface. Publishing info about the Device status To expose info about its current status or measured data, some additional Astarte Interfaces are already defined for Edgehog. Their adoption is optional but recommended. This section reports an overview on the current system status of the Device. io.edgehog.devicemanager.SystemStatus : reports the current OS status. io.edgehog.devicemanager.StorageUsage : reports the capacity and usage of the storage units. io.edgehog.devicemanager.BatteryStatus : reports the current status of the battery slots. io.edgehog.devicemanager.WiFiScanResults : reports the list of nearby Access Points that the Device found while scanning for WiFi signals.","ref":"interacting_with_edgehog.html#publishing-device-data","title":"Interacting with Edgehog - Publishing Device data","type":"extras"},{"doc":"","ref":"astarte_interfaces.html","title":"Astarte Interfaces","type":"extras"},{"doc":"About This interface is of type properties and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can set a persistent, stateful, synchronized state with no concept of history or timestamping. Mappings The interface has the following mappings: /fingerprint with string type. OS bundle release identification code /name with string type. Name of the bundle /version with string type. Version of the bundle /buildId with string type. Human readable build identifier. Examples are [date][time] or [date]-[time]-[git-commit] /fingerprint OS bundle release identification code This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /name Name of the bundle This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /version Version of the bundle This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /buildId Human readable build identifier. Examples are [date][time] or [date]-[time]-[git-commit] This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-baseimage-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.BaseImage v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an object aggregation. Astarte expects the owner to send all of the interface's mappings at the same time, packed in a single message. Mappings The interface has the following mappings: /%{battery_slot}/levelPercentage with double type. Battery level estimated percentage [0.0%-100.0%] /%{battery_slot}/levelAbsoluteError with double type. Battery level measurement absolute error [0.0-100.0] /%{battery_slot}/status with string type. Battery status string, any of: Charging, Discharging, Idle, EitherIdleOrCharging, Failure, Removed, Unknown /%{battery_slot}/levelPercentage Battery level estimated percentage [0.0%-100.0%] This endpoint accepts values of type double : a double-precision floating-point number as specified by binary64, by the IEEE 754 standard. The endpoint is parametric and battery_slot can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{battery_slot}/levelAbsoluteError Battery level measurement absolute error [0.0-100.0] This endpoint accepts values of type double : a double-precision floating-point number as specified by binary64, by the IEEE 754 standard. The endpoint is parametric and battery_slot can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{battery_slot}/status Battery status string, any of: Charging, Discharging, Idle, EitherIdleOrCharging, Failure, Removed, Unknown This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and battery_slot can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-batterystatus-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.BatteryStatus v0.1","type":"extras"},{"doc":"About This interface is of type properties and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can set a persistent, stateful, synchronized state with no concept of history or timestamping. Mappings The interface has the following mappings: /%{id}/apn with string type. Operator apn address. /%{id}/imei with string type. The modem IMEI code of the device. /%{id}/imsi with string type. The SIM IMSI code of the device. /%{id}/apn Operator apn address. This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The value of the property can be unset. /%{id}/imei The modem IMEI code of the device. This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The value of the property can be unset. /%{id}/imsi The SIM IMSI code of the device. This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The value of the property can be unset.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-cellularconnectionproperties-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.CellularConnectionProperties v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an object aggregation. Astarte expects the owner to send all of the interface's mappings at the same time, packed in a single message. Mappings The interface has the following mappings: /%{id}/carrier with string type. Connectivity carrier operator name. /%{id}/cellId with longinteger type. The Cell ID in hexadecimal format, either 16 bit for 2G or 28 bit for 3G or 4G. /%{id}/mobileCountryCode with integer type. The mobile country code (MCC) for the device's home network. Valid range: 0–999. /%{id}/mobileNetworkCode with integer type. The Mobile Network Code for the device's home network. This is the MNC for GSM, WCDMA, LTE and NR. CDMA uses the System ID (SID). Valid range for MNC: 0–999. Valid range for SID: 0–32767. /%{id}/localAreaCode with integer type. Two byte location area code in hexadecimal format. /%{id}/registrationStatus with string type. GSM/LTE registration status. Possible values: [NotRegistered, Registered, SearchingOperator, RegistrationDenied, Unknown, RegisteredRoaming] /%{id}/rssi with double type. Signal strenght of the device in dBm. /%{id}/technology with string type. Access Technology. Possible values [GSM, GSMCompact, UTRAN, GSMwEGPRS, UTRANwHSDPA, UTRANwHSUPA, UTRANwHSDPAandHSUPA, EUTRAN] /%{id}/carrier Connectivity carrier operator name. This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{id}/cellId The Cell ID in hexadecimal format, either 16 bit for 2G or 28 bit for 3G or 4G. This endpoint accepts values of type longinteger : a signed 64 bit integer (please note that longinteger is represented as a string by default in JSON-based APIs.). The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{id}/mobileCountryCode The mobile country code (MCC) for the device's home network. Valid range: 0–999. This endpoint accepts values of type integer : a signed 32 bit integer. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{id}/mobileNetworkCode The Mobile Network Code for the device's home network. This is the MNC for GSM, WCDMA, LTE and NR. CDMA uses the System ID (SID). Valid range for MNC: 0–999. Valid range for SID: 0–32767. This endpoint accepts values of type integer : a signed 32 bit integer. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{id}/localAreaCode Two byte location area code in hexadecimal format. This endpoint accepts values of type integer : a signed 32 bit integer. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{id}/registrationStatus GSM/LTE registration status. Possible values: [NotRegistered, Registered, SearchingOperator, RegistrationDenied, Unknown, RegisteredRoaming] This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{id}/rssi Signal strenght of the device in dBm. This endpoint accepts values of type double : a double-precision floating-point number as specified by binary64, by the IEEE 754 standard. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{id}/technology Access Technology. Possible values [GSM, GSMCompact, UTRAN, GSMwEGPRS, UTRANwHSDPA, UTRANwHSUPA, UTRANwHSDPAandHSUPA, EUTRAN] This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-cellularconnectionstatus-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.CellularConnectionStatus v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the server , meaning that it is the server which initiates the data flow. Thanks to this type of interface, the server can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an individual aggregation. Each mapping is treated as an independent value and is managed individually. Mappings The interface has the following mappings: /request with string type. Command request. Possible values ['Reboot'] /request Command request. Possible values ['Reboot'] This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-commands-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.Commands v0.1","type":"extras"},{"doc":"General hardware capabilities About This interface is of type properties and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can set a persistent, stateful, synchronized state with no concept of history or timestamping. Mappings The interface has the following mappings: /cpu/architecture with string type. CPU Architecture /cpu/model with string type. CPU Model Code /cpu/modelName with string type. CPU Model Display Name /cpu/vendor with string type. CPU Vendor /mem/totalBytes with longinteger type. Total RAM quantity (Bytes) /cpu/architecture CPU Architecture This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /cpu/model CPU Model Code This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /cpu/modelName CPU Model Display Name This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /cpu/vendor CPU Vendor This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /mem/totalBytes Total RAM quantity (Bytes) This endpoint accepts values of type longinteger : a signed 64 bit integer (please note that longinteger is represented as a string by default in JSON-based APIs.). The value of the property cannot be unset.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-hardwareinfo-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.HardwareInfo v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the server , meaning that it is the server which initiates the data flow. Thanks to this type of interface, the server can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an individual aggregation. Each mapping is treated as an independent value and is managed individually. Mappings The interface has the following mappings: /%{led_id}/behavior with string type. Enum describing the behavior of the given led. Possible values: [Blink60Seconds | DuobleBlink60Seconds | SlowBlink60Seconds] /%{led_id}/behavior Enum describing the behavior of the given led. Possible values: [Blink60Seconds | DuobleBlink60Seconds | SlowBlink60Seconds] Blink60Seconds: Blinking DuobleBlink60Seconds: Double blinking SlowBlink60Seconds: Slow blinking This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and led_id can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-ledbehavior-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.LedBehavior v0.1","type":"extras"},{"doc":"About This interface is of type properties and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can set a persistent, stateful, synchronized state with no concept of history or timestamping. Mappings The interface has the following mappings: /%{iface_name}/macAddress with string type. Normalized physical address. Example value is &quot;00:aa:bb:cc:dd:ee&quot; (always lower case) /%{iface_name}/technologyType with string type. Connection technology. Possible values: [Ethernet, Bluetooth, Cellular, WiFi] /%{iface_name}/macAddress Normalized physical address. Example value is &quot;00:aa:bb:cc:dd:ee&quot; (always lower case) This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and iface_name can be replaced with any valid string to send data on specialized paths. The value of the property can be unset. /%{iface_name}/technologyType Connection technology. Possible values: [Ethernet, Bluetooth, Cellular, WiFi] This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint is parametric and iface_name can be replaced with any valid string to send data on specialized paths. The value of the property can be unset.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-networkinterfaceproperties-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.NetworkInterfaceProperties v0.1","type":"extras"},{"doc":"About This interface is of type properties and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can set a persistent, stateful, synchronized state with no concept of history or timestamping. Mappings The interface has the following mappings: /osName with string type. Name of the Operating System /osVersion with string type. Version of the Operating System /osName Name of the Operating System This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /osVersion Version of the Operating System This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-osinfo-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.OSInfo v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the server , meaning that it is the server which initiates the data flow. Thanks to this type of interface, the server can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an object aggregation. Astarte expects the owner to send all of the interface's mappings at the same time, packed in a single message. Mappings The interface has the following mappings: /request/url with string type. File URL /request/uuid with string type. Request identifier /request/url File URL This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Data is considered delivered when it has been received at least once by the recipient. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 31556952 seconds before it is erased from the database. /request/uuid Request identifier This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Data is considered delivered when it has been received at least once by the recipient. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 31556952 seconds before it is erased from the database.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-otarequest-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.OTARequest v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an object aggregation. Astarte expects the owner to send all of the interface's mappings at the same time, packed in a single message. Mappings The interface has the following mappings: /response/uuid with string type. Request identifier /response/status with string type. Possible values: [ InProgress | Error | Done ] /response/statusCode with string type. /response/uuid Request identifier This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Data is considered delivered when it has been received at least once by the recipient. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 31556952 seconds before it is erased from the database. /response/status Possible values: [ InProgress | Error | Done ] This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Data is considered delivered when it has been received at least once by the recipient. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 31556952 seconds before it is erased from the database. /response/statusCode This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Data is considered delivered when it has been received at least once by the recipient. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 31556952 seconds before it is erased from the database.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-otaresponse-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.OTAResponse v0.1","type":"extras"},{"doc":"About This interface is of type properties and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can set a persistent, stateful, synchronized state with no concept of history or timestamping. Mappings The interface has the following mappings: /name with string type. Name of the Edgehog runtime. Example value: edgehog-esp32-device /url with string type. URL that uniquely identifies the Edgehog Edgehog runtime implementation. Example value: https://github.com/edgehog-device-manager/edgehog-esp32-device . /version with string type. Version of the Edgehog runtime. Example value: 0.5 /environment with string type. Environment of the Edgehog runtime. Example value: esp-idf VERSION , Rust 1.58 or Java 8 /name Name of the Edgehog runtime. Example value: edgehog-esp32-device This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /url URL that uniquely identifies the Edgehog Edgehog runtime implementation. Example value: https://github.com/edgehog-device-manager/edgehog-esp32-device . This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /version Version of the Edgehog runtime. Example value: 0.5 This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /environment Environment of the Edgehog runtime. Example value: esp-idf VERSION , Rust 1.58 or Java 8 This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-runtimeinfo-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.RuntimeInfo v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an object aggregation. Astarte expects the owner to send all of the interface's mappings at the same time, packed in a single message. Mappings The interface has the following mappings: /%{label}/totalBytes with longinteger type. Total storage size in bytes /%{label}/freeBytes with longinteger type. Available storage bytes /%{label}/totalBytes Total storage size in bytes This endpoint accepts values of type longinteger : a signed 64 bit integer (please note that longinteger is represented as a string by default in JSON-based APIs.). The endpoint is parametric and label can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /%{label}/freeBytes Available storage bytes This endpoint accepts values of type longinteger : a signed 64 bit integer (please note that longinteger is represented as a string by default in JSON-based APIs.). The endpoint is parametric and label can be replaced with any valid string to send data on specialized paths. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-storageusage-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.StorageUsage v0.1","type":"extras"},{"doc":"Information about the system About This interface is of type properties and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can set a persistent, stateful, synchronized state with no concept of history or timestamping. Mappings The interface has the following mappings: /serialNumber with string type. The serial number of the system /partNumber with string type. The part number of the system /serialNumber The serial number of the system This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset. /partNumber The part number of the system This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The value of the property cannot be unset.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-systeminfo-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.SystemInfo v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an object aggregation. Astarte expects the owner to send all of the interface's mappings at the same time, packed in a single message. Mappings The interface has the following mappings: /systemStatus/availMemoryBytes with longinteger type. Available memory (Bytes) /systemStatus/bootId with string type. UUID representing the Boot Id /systemStatus/taskCount with integer type. Number of running tasks or processes /systemStatus/uptimeMillis with longinteger type. Get time in milliseconds since boot /systemStatus/availMemoryBytes Available memory (Bytes) This endpoint accepts values of type longinteger : a signed 64 bit integer (please note that longinteger is represented as a string by default in JSON-based APIs.). The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /systemStatus/bootId UUID representing the Boot Id This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /systemStatus/taskCount Number of running tasks or processes This endpoint accepts values of type integer : a signed 32 bit integer. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /systemStatus/uptimeMillis Get time in milliseconds since boot This endpoint accepts values of type longinteger : a signed 64 bit integer (please note that longinteger is represented as a string by default in JSON-based APIs.). The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-systemstatus-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.SystemStatus v0.1","type":"extras"},{"doc":"About This interface is of type datastream and is owned by the device , meaning that it is the device which initiates the data flow. Thanks to this type of interface, the device can send a mutable, ordered stream of data, with no concept of persistent state or synchronization. Data gets sent with an object aggregation. Astarte expects the owner to send all of the interface's mappings at the same time, packed in a single message. Mappings The interface has the following mappings: /ap/channel with integer type. The channel over which the client is communicating with the access point. /ap/essid with string type. Extended Service Set Identification of the current AP, empty string if the AP is hidden. /ap/macAddress with string type. Lower case mac address string formatted like de:ad:be:ff:11:22 . /ap/rssi with integer type. The current signal strength measured in dBm. /ap/channel The channel over which the client is communicating with the access point. The channel represents one of the ranges into which the reference frequency is divided and it's identified by an integer number in the range 1 - 165, depending on the frequency itself and the region. This endpoint accepts values of type integer : a signed 32 bit integer. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /ap/essid Extended Service Set Identification of the current AP, empty string if the AP is hidden. This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /ap/macAddress Lower case mac address string formatted like de:ad:be:ff:11:22 . This endpoint accepts values of type string : an UTF-8 string, at most 65536 bytes long. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database. /ap/rssi The current signal strength measured in dBm. This endpoint accepts values of type integer : a signed 32 bit integer. The endpoint has a specific configuration for how data is stored, transferred and indexed. Astarte expects a valid timestamp to be attached each time data is produced. Data is considered delivered when the transport successfully sends the data regardless of the outcome. Data is discarded if the transport is temporarily uncapable of delivering it. Delivered data is kept for 5184000 seconds before it is erased from the database.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-wifiscanresults-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.WiFiScanResults v0.1","type":"extras"},{"doc":"About This interface is of type properties and is owned by the server , meaning that it is the server which initiates the data flow. Thanks to this type of interface, the server can set a persistent, stateful, synchronized state with no concept of history or timestamping. Mappings The interface has the following mappings: /request/%{interface_name}/enable with boolean type. Enable/Disable telemetry update. Unset returns to the previous state configured in the device. /request/%{interface_name}/periodSeconds with longinteger type. Set interval of period seconds between the end of the previous update and the start of the next one. Unset returns to the previous state configured in the device. /request/%{interface_name}/enable Enable/Disable telemetry update. Unset returns to the previous state configured in the device. This endpoint accepts values of type boolean : either true or false, adhering to JSON boolean type. The endpoint is parametric and interface_name can be replaced with any valid string to send data on specialized paths. The value of the property can be unset. /request/%{interface_name}/periodSeconds Set interval of period seconds between the end of the previous update and the start of the next one. Unset returns to the previous state configured in the device. This endpoint accepts values of type longinteger : a signed 64 bit integer (please note that longinteger is represented as a string by default in JSON-based APIs.). The endpoint is parametric and interface_name can be replaced with any valid string to send data on specialized paths. The value of the property can be unset.","ref":"astarte_interfaces.html#io-edgehog-devicemanager-config-telemetry-v0-1","title":"Astarte Interfaces - io.edgehog.devicemanager.config.Telemetry v0.1","type":"extras"}]