searchNodes=[{"doc":"Edgehog is an Open Source IoT platform focused on device fleet management. It conveniently handles fundamental operations such as performing update campaigns, getting device status information, geolocation and much more. It is based on Astarte . This documentation provides information on daily operations for Edgehog users and integrators. It goes through fundamental operations such as performing updates, querying APIs , integrating 3rd party applications, etc.","ref":"intro_user.html","title":"Introduction","type":"extras"},{"doc":"This page will illustrate some of the core concepts used in Edgehog.","ref":"core_concepts.html","title":"Core concepts","type":"extras"},{"doc":"This section will deal with the difference between three main concepts used throughout Edgehog: Hardware Types, Devices and Appliances. To better illustrate this, we will use as example the ACME Inc company, which manages a fleet of e-bikes and electric scooters. We will illustrate the hierarchy going from the bottom up, showing how each concept relates to the other ones. Hardware Type An Hardware Type represents the electronic hardware components embedded in an Appliance. As an example, a possible Hardware Type description could be &quot;ESP32 with a GSM module&quot; or &quot;RaspberryPi 0 with an LTE modem&quot;. Each Hardware Type can have one or more Hardware Type Part Numbers associated with it. This makes sure that the user is able to map, e.g., a new revision of the PCB to the same Hardware Type, since different hardware with the same Hardware Type is assumed to be compatible. Usually (but not necessarily) the Hardware Type Part Number is a code that is written on the PCB. Device A device is an entity connected to Astarte. A Device has a uniquely identified by its Device ID, and it usually lives inside an Appliance (if it is not on a shelf or in a repair shop). Note that an Appliance is not tied to a specific device forever: using the bike sharing analogy, a physical e-bike is the appliance, the device is the board which connects it to Astarte. If the board breaks, it is possible that the e-bike is sent to a repair shop to replace it with a new one. In that case, the Appliance would stay the same (since the physical bike is always the same), but it will be associated with a new Device. Moreover, the old Device could actually be repaired and assigned to a new Appliance. Appliance Models An Appliance Model constitutes a group of Appliances implementing the same functionality for some users. Two different appliances can be physically identical and still belong to different Appliance Models, since they can have different software running on them. An Appliance Model is associated with a specific Hardware Type, so two Appliances implementing the same functionality but using different Hardware Types will belong to two different Appliance Models. This makes it so that the Appliance Model is the fundamental identifier when it comes to software updates. An Appliance Model has one or more Appliance Model Part Numbers asociated with it, allowing to track newer versions of an appliance which do not change its main functionality (e.g. a new e-bike model using brakes from a different vendor). Usually (but not necessarily) the Appliance Model Part Number is written on the Appliance itself, or on the box containing it. Drawing again from our bike sharing example, e-bikes and electric scooters would represent two different Appliance Models, even if they use the same Hardware Type (e.g. an ESP32 with a GSM module). It is also possible that the e-bikes are further split into different Appliance Models depending on the country they are deployed in if, for example, the software has to conform to speed limitations which are specific for each country.","ref":"core_concepts.html#hardware-types-devices-and-appliance-models","title":"Core concepts - Hardware types, Devices and Appliance Models","type":"extras"},{"doc":"For each hardware type the following information can be displayed and edited. Name: a user friendly name, such as &quot;Strawberry Pi 5&quot; Handle: a machine friendly identifier, such as &quot;strawberry-pi-5&quot; (it must be a lower case, alpha numeric string, with no spaces and dashes allowed in the middle) Part Numbers: a list of part numbers, such as &quot;STBEPI-5-MA-2GB-REV1&quot;,&quot;STBEPI-5-MB-8GB-REV1&quot;, &quot;STBEPI-5-MB-8GB-REV2&quot;, etc... Multiple part numbers can be entered using the &quot;Add Part Number&quot; button.","ref":"hardware_types.html","title":"Hardware Types","type":"extras"},{"doc":"This page allows creating a new hardware type, once created it can be edited at a later time.","ref":"hardware_types.html#create-hardware-type","title":"Hardware Types - Create Hardware Type","type":"extras"},{"doc":"By clicking the link on the hardware type list it is possible to open the detailed Hardware Type page. It is possible to edit the existing hardware type and to update it clicking the &quot;Update&quot; button.","ref":"hardware_types.html#update-hardware-type","title":"Hardware Types - Update Hardware Type","type":"extras"},{"doc":"As already mentioned in the core concepts , Appliance Models represent a group of Appliances providing the same functionalities to users. In Edgehog an Appliance Model has this information associated with it: Name: a user friendly name used to identify the Appliance Model (e.g. &quot;E-Bike v2&quot;) Handle: a machine friendly identifier for the Appliance Model (e.g. &quot;e-bike-v2&quot;). A valid handle must begin with a lowercase letter followed by any number of lower case letters, numbers or dashes ( - ). Hardware type: the Hardware Type that is used for this appliance model. As illustrated in core concepts , each Appliance Model is associated with exactly one Hardware Type. Part numbers: the Part Numbers for this Appliance Model. Each Appliance Model can have one or more Part Numbers associated with it, and Devices will be associated with an Appliance Model based on the Part Number they declare to implement. Picture: each Appliance Model can have a picture associated with it, so that Devices using that Appliance Model can be identified at a glance. The following sections will illustrate all the pages that can be used to list, create and edit Appliance Models.","ref":"appliance_models.html","title":"Appliance models","type":"extras"},{"doc":"In the appliance model list you can see all the Appliance Models that are available. All information relative to each Appliance Model (minus the picture) is present in the table, and clicking on the name brings to the Appliance Model page. Clicking on the &quot;Create Appliance Model&quot; button in the top right brings to Create Appliance Model page.","ref":"appliance_models.html#appliance-model-list","title":"Appliance models - Appliance Model List","type":"extras"},{"doc":"The Appliance Model page shows the information about a specific Appliance Model and allows updating all of them except the Hardware Type. Editing any field and then pressing the &quot;Update&quot; button saves the new values for the Appliance Model. The &quot;Add Part Number&quot; button allows adding additional Part Numbers to an Appliance Model, and the thrash icon on the right of each of them allows deleting them.","ref":"appliance_models.html#appliance-model","title":"Appliance models - Appliance Model","type":"extras"},{"doc":"The Create Appliance Model page allows creating a new Appliance Model. The Appliance Model information can be provided using the form, and pressing the &quot;Update&quot; button saves the Appliance Model. The Hardware Type must be chosen from a list of available Hardware Types using the dropdown menu. The &quot;Add Part Number&quot; button allows adding additional Part Numbers for the Appliance Model.","ref":"appliance_models.html#create-appliance-model","title":"Appliance models - Create Appliance Model","type":"extras"},{"doc":"As mentioned in the core concepts , a Device is an entity connected to Astarte. In the device list you can see all the Devices that are available. For each Device the following information can be displayed: Name: a user friendly name Device ID: the ID that uniquely identifies the device connecting to Astarte Appliance Model: the Appliance Model associated to the Device Hardware Type: the Hardware Type associated to the Device's Appliance Model Status: Reports the connection status, indicating whether the Device is connected to Astarte Last Seen: Reports the time of the last connection activity of the Device Clicking on a Device's name brings to a page dedicated to that Device to display additional info.","ref":"devices.html","title":"Devices","type":"extras"},{"doc":"Each Device will become visible in Edgehog automatically the first time it connects to Astarte. Indeed, Astarte informs Edgehog about the Device's presence and activity via Astarte Triggers, which should be configured to relay the appropriate events.","ref":"devices.html#adding-a-device","title":"Devices - Adding a Device","type":"extras"},{"doc":"Each Device is associated to a specific Appliance, hence a specific Appliance Model. The Appliance Model is the fundamental identifier when it comes to software updates, since it dictates which software is supported and what functionalities should be configured. However, during its lifetime, a Device can be tied to different Appliance Models. Say, for example, that two different models of e-bikes are sent to maintenance; if they share the same hardware, the working PCB board of one model could be fitted into the other one. For this reason, each time a Device connects to Astarte, it can notify Astarte about the Appliance Model it is plugged into, exposing its Part Number. Astarte then informs Edgehog via Astarte Triggers, so that Edgehog can associate the Device to the correct Appliance Model by matching the Device's Part Number with the ones of the Appliance Model.","ref":"devices.html#associating-a-device-to-an-appliance-model","title":"Devices - Associating a Device to an Appliance Model","type":"extras"},{"doc":"On the page of each Device different sets of data are shown. On top of the basic info already visible in the device list, additional sections can be displayed here to report operational data exposed by the device. The details about how devices publish such data are explained in Interacting with Edgehog . Hardware info This section reports an overview on the general hardware capabilities of the Device. System status This section reports an overview on the current system status of the Device. Storage Status This section reports an overview on the capacity and usage of the storage units of the Device. Battery status This section reports an overview on the current status of the battery slots of the Device. Nearby WiFi APs This section reports the list of nearby Access Points that the Device found while scanning for WiFi signals. Geolocation This section reports the approximate location of the Device, using Edgehog's geolocation modules to estimate a set of GPS coordinates. Depending on the data exposed by the Device, the coordinates can be estimated from: nearby WiFi APs that the Device detected recently the IP address used by the Device to connect to Astarte Based on the available data, Edgehog's geolocation modules try to find to best estimate by relying on the most up-to-date info and using the ones that provide the most accuracy.","ref":"devices.html#device-info","title":"Devices - Device info","type":"extras"},{"doc":"Edgehog's interaction is logically divided amongst two main entities: devices and users. Devices are the bottom end, and represent the IoT fleet. They can access Astarte and exchange data via Astarte Interfaces which, in turn, also define on a very granular level which kind of data they can exchange. Data exposed by devices are relayed to Edgehog via Astarte Triggers. Users are actual users, applications or anything else which needs to interact with Edgehog.","ref":"interacting_with_edgehog.html","title":"Interacting with Edgehog","type":"extras"},{"doc":"To interact with Edgehog, several options are available: Edgehog's dashboard interface: it provides a built-in UI that can be used for managing Devices, Hardware Types, and Appliance Models. It is meant to be a graphical, user-friendly tool to manage those entities. Edgehog's GraphQL APIs : they are meant as a machine-friendly way to perform operations on Edgehog's entities and for integrating 3rd party applications.","ref":"interacting_with_edgehog.html#user-side-tools","title":"Interacting with Edgehog - User-side Tools","type":"extras"},{"doc":"Devices can publish any kind of data to Astarte via Astarte Interfaces. However, some standard interfaces are already supported by Edgehog in order to provide useful functionalities, such as device geolocation. Hence, data that devices send via Edgehog's Astarte Interfaces are automatically understood, collected and reported by Edgehog. Publishing info about the Appliance Each Device is supposed to notify Astarte, e.g. on each connection, about the Appliance Model it is plugged into. To do so, the Device can use the io.edgehog.devicemanager.ApplianceInfo Astarte Interface to specify: the Serial Number: a code that uniquely identifies the Appliance the Part Number: a code that uniquely identifies the Appliance Model When exposing the Part Number, Edgehog can associate the Device to the correct Appliance Model by matching the Device's Part Number with the ones of the registered Appliance Model. Publishing info about the hardware Each Device can notify Astarte about the general capabilities of the Device. These info are hardware-related and are usually not intended to change over time. A Device can expose this set of data via the io.edgehog.devicemanager.HardwareInfo Astarte Interface. Publishing info about the Device status To expose info about its current status or measured data, some additional Astarte Interfaces are already defined for Edgehog. Their adoption is optional but recommended. This section reports an overview on the current system status of the Device. io.edgehog.devicemanager.SystemStatus : reports the current OS status. io.edgehog.devicemanager.StorageUsage : reports the capacity and usage of the storage units. io.edgehog.devicemanager.BatteryStatus : reports the current status of the battery slots. io.edgehog.devicemanager.WiFiScanResults : reports the list of nearby Access Points that the Device found while scanning for WiFi signals.","ref":"interacting_with_edgehog.html#publishing-device-data","title":"Interacting with Edgehog - Publishing Device data","type":"extras"},{"doc":"This is an overview of Edgehog's architecture. The following sections will detail the interactions between Edgehog and the other components represented in the architecture diagram.","ref":"overview.html","title":"Architecture overview","type":"extras"},{"doc":"Edgehog exposes two ways to interact with it: a frontend that can be used by users and a GraphQL API which can be used by third party applications to programmatically perform all actions that can be performed in the frontend. As a matter of fact, the frontend itself uses the GraphQL API to perform its tasks.","ref":"overview.html#user-interaction","title":"Architecture overview - User interaction","type":"extras"},{"doc":"Edgehog uses PostgreSQL to store its data. The database schema supports multiple tenants which are isolated at the database level. This makes it possible to use a single Edgehog instance with multiple tenants (e.g. in a SaaS scenario).","ref":"overview.html#database-interaction","title":"Architecture overview - Database interaction","type":"extras"},{"doc":"To interact with the other side of the domain (i.e. devices), Edgehog is built upon Astarte and it exchanges data with it using two of its mechanisms: its REST API and Astarte Triggers . Each Edgehog tenant is mapped to an Astarte Realm, and it owns the credentials to interact with all the Realm APIs for that specific Realm. Edgehog Astarte Interfaces The interaction between Edgehog and Astarte is defined by a set of interfaces that define which data is sent both from Edgehog to the Devices and from the Devices towards Edgehog. Additionally, connection and disconnection triggers ar installed in the Astarte Realm, and point to the triggers endpoint of the Edgehog tenant. Astarte AppEngine API The REST API is called every time Edgehog needs to retrieve data contained in an Astarte interface or when it needs to send data to the Devices. In the first case, Edgehog issues a GET HTTP request to retrieve the data from AppEngine API, which reads the data from the Astarte database. When Edgehog needs to send data towards a Device instead, it sends a POST HTTP to AppEngine API, which takes care of delivering data via MQTT to the device. Astarte Triggers Astarte Triggers are used to update the online state of the device. Each time a Device connects or disconnects from Astarte, Astarte Trigger Engine sends an HTTP POST request to the Edgehog backend, which in turn updates the Device online status in its own database.","ref":"overview.html#device-interaction-through-astarte","title":"Architecture overview - Device interaction (through Astarte)","type":"extras"}]